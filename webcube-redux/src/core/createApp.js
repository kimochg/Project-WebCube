import React, { PureComponent } from 'react';
import hoistNonReactStatic from 'hoist-non-react-statics';
import { createStore, combineReducers, applyMiddleware } from 'redux';
import { Provider } from 'react-redux';

// https://www.npmjs.com/package/redux-thunk
import thunkMiddleware from 'redux-thunk';
// https://www.npmjs.com/package/redux-debounced
import createDebounce from 'redux-debounced';
// https://www.npmjs.com/package/redux-promise-middleware
import promiseMiddleware from 'redux-promise-middleware';
// https://www.npmjs.com/package/redux-observable
import { combineEpics, createEpicMiddleware } from 'redux-observable';
// https://www.npmjs.com/package/topologically-combine-reducers
import topologicallyCombineReducers from 'topologically-combine-reducers';

import { getDisplayName } from '../utils';

const isProdEnv = process.env.NODE_ENV === 'production';
let composeWithDevTools, freezeMiddleware, logger, createLogger;
if (isProdEnv) {
  // https://medium.com/@zalmoxis/using-redux-devtools-in-production-4c5b56c5600f
  ({
    composeWithDevTools,
  } = require('redux-devtools-extension/logOnlyInProduction'));
} else {
  // https://github.com/zalmoxisus/redux-devtools-extension#13-use-redux-devtools-extension-package-from-npm
  ({ composeWithDevTools } = require('redux-devtools-extension'));
  // https://github.com/leoasis/redux-immutable-state-invariant
  freezeMiddleware = require('redux-immutable-state-invariant').default();
  // https://www.npmjs.com/package/redux-logger
  const reduxLogger = require('redux-logger');
  logger = reduxLogger.default;
  ({ createLogger } = reduxLogger);
}

export default function createApp({
  // https://redux.js.org/docs/recipes/reducers/UsingCombineReducers.html
  // https://redux.js.org/docs/recipes/reducers/ReusingReducerLogic.html
  reducers: originReducers = {},
  // optional
  // https://www.npmjs.com/package/topologically-combine-reducers
  reducerDeps = null,
  // optional
  // https://redux-observable.js.org/docs/basics/Epics.html
  epics = [],
  // optional
  disableFreezeState = false,
  // optional
  // https://www.npmjs.com/package/topologically-combine-reducers
  enableTopologic = false,
  // optional
  // https://www.npmjs.com/package/redux-logger#options
  loggerConfig = null,
  // optional
  // https://redux.js.org/docs/recipes/reducers/InitializingState.html
  preloadedState = null,
  // optional
  // https://redux.js.org/docs/advanced/Middleware.html
  // https://redux.js.org/docs/api/applyMiddleware.html
  middlewares = [],
  // optional
  priorMiddlewares = [],
  // optional
  // https://redux.js.org/docs/Glossary.html#store-enhancer
  enhancers = [],
  // optional
  priorEnhancers = [],
  // all below are autogenerated
  _enableRouter = false,
  _routerReducer,
  _routerMiddleware,
  _routerHistory,
  _ConnectedRouter: ConnectedRouter,
  _enableRouter3 = false,
  _syncRouterHistoryWithStore,
  _enablePersist = false,
  _persistStorage,
  _persistKey,
  _persistConfig,
  _persistStore,
  _persistCombineReducers,
  _PersistGate: PersistGate,
  _enableImmutable = false,
  _immutableCombineReducers,
}) {
  const reducers = Object.assign(
    {},
    originReducers,
    (_enableRouter && { router: _routerReducer }) ||
      (_enableRouter3 && { routing: _routerReducer }) ||
      {},
  );
  let canWeEnableImmutableJS = _enableImmutable;
  if (_enableImmutable && (_enablePersist || enableTopologic)) {
    canWeEnableImmutableJS = false;
    console.warn(
      '[createApp] Wrong settings. `withImmutable` is automatically disabled because you have enabled other feature conflict with ImmutableJS data',
    );
  }
  let rootReducer;
  if (canWeEnableImmutableJS) {
    // https://www.npmjs.com/package/redux-immutable
    // https://redux.js.org/docs/recipes/UsingImmutableJS.html#make-your-entire-redux-state-tree-an-immutablejs-object
    rootReducer = _immutableCombineReducers(reducers);
  } else if (enableTopologic) {
    // https://www.npmjs.com/package/topologically-combine-reducers
    rootReducer = topologicallyCombineReducers(reducers, reducerDeps);
  } else {
    // https://redux.js.org/docs/api/combineReducers.html
    rootReducer = combineReducers(reducers);
  }
  if (_enablePersist) {
    // https://github.com/rt2zz/redux-persist#usage
    rootReducer = _persistCombineReducers(
      _persistConfig || {
        key: _persistKey,
        storage: _persistStorage,
      },
      {
        persist: rootReducer,
      },
    );
  }
  // https://redux.js.org/docs/api/applyMiddleware.html
  const middlewaresToApply = [
    ...priorMiddlewares,
    createDebounce(),
    // https://github.com/pburtchaell/redux-promise-middleware/blob/4c6282e54c41034591d8925fe29457b472b04e69/docs/introduction.md
    // https://github.com/pburtchaell/redux-promise-middleware/blob/4c6282e54c41034591d8925fe29457b472b04e69/docs/guides/custom-suffixes.md
    // https://github.com/pburtchaell/redux-promise-middleware/blob/4c6282e54c41034591d8925fe29457b472b04e69/docs/guides/custom-separators.md
    promiseMiddleware(),
    // https://www.npmjs.com/package/redux-thunk#injecting-a-custom-argument
    thunkMiddleware,
    // https://redux-observable.js.org/docs/basics/SettingUpTheMiddleware.html
    createEpicMiddleware(combineEpics(...epics)),
    ...middlewares,
  ]
    .concat(
      isProdEnv || disableFreezeState
        ? []
        : [
            // https://github.com/leoasis/redux-immutable-state-invariant#immutablestateinvariantmiddleware-isimmutable-ignore-
            freezeMiddleware,
          ],
    )
    .concat(
      _enableRouter || _enableRouter3
        ? []
        : [
            // https://github.com/reacttraining/react-router/tree/master/packages/react-router-redux#usage
            _routerMiddleware(_routerHistory),
          ],
    )
    .concat(
      isProdEnv
        ? []
        : [
            // https://www.npmjs.com/package/redux-logger
            // logger must be the last middleware in chain
            loggerConfig ? createLogger(loggerConfig) : logger,
          ],
    );
  // https://redux.js.org/docs/api/compose.html
  // https://github.com/zalmoxisus/redux-devtools-extension#12-advanced-store-setup
  const allEnhancers = composeWithDevTools(
    ...priorEnhancers,
    applyMiddleware(...middlewaresToApply),
    ...enhancers,
  );
  const initialState = _enablePersist
    ? {
        persist: preloadedState,
      }
    : preloadedState;
  return SubAppComponent => {
    class WithAppState extends PureComponent {
      // https://redux.js.org/docs/recipes/IsolatingSubapps.html
      // https://gist.github.com/gaearon/eeee2f619620ab7b55673a4ee2bf8400
      constructor(props) {
        super(props);
        // https://redux.js.org/docs/api/createStore.html
        // https://redux.js.org/docs/api/Store.html
        this.store = createStore(rootReducer, initialState, allEnhancers);
        if (_enablePersist) {
          // https://github.com/rt2zz/redux-persist#usage
          this.persistor = _persistStore(this.store);
        }
      }

      render() {
        const { store, persistor } = this;
        const { ...passThroughProps } = this.props;
        const withProps = React.createElement(SubAppComponent, {
          ...(_enableRouter3
            ? {
                routerHistoryWithStore: _syncRouterHistoryWithStore(
                  _routerHistory,
                  store,
                ),
              }
            : {}),
          ...passThroughProps,
        });
        const withStore = React.createElement(
          // https://redux.js.org/docs/basics/UsageWithReact.html#passing-the-store
          Provider,
          { store },
          _enableRouter
            ? React.createElement(
                ConnectedRouter,
                {
                  history: _routerHistory,
                },
                withProps,
              )
            : withProps,
        );
        if (_enablePersist) {
          // https://github.com/rt2zz/redux-persist#usage
          return React.createElement(PersistGate, { persistor }, withStore);
        } else {
          return withStore;
        }
      }
    }
    hoistNonReactStatic(WithAppState, SubAppComponent);
    WithAppState.displayName = `WithAppState(${getDisplayName(
      SubAppComponent,
    )})`;
    return WithAppState;
  };
}
